x <- 4 * sin(r) + .04
x_origin <- x
foobar0 <- function(x, z) {
# Sample code
if (sum(x >= .001) < 1) {
stop("step 1 requires 1 observation(s) with value >= .001")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- sin(r) + .01
if (sum(x >= .002) < 2) {
stop("step 2 requires 2 observation(s) with value >= .002")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 2 * sin(r) + .02
if (sum(x >= .003) < 3) {
stop("step 3 requires 3 observation(s) with value >= .003")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 3 * sin(r) + .03
if (sum(x >= .004) < 4) {
stop("step 4 requires 4 observation(s) with value >= .004")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 4 * sin(r) + .04
# Storing the result in the 'x_foobar0' object in the global environment
assign("x_foobar0", x, envir = parent.env(environment()))
}
## 'foobar0' function
set.seed(1)
x <- rnorm(100)
z <- rnorm(100)
# Excuting 'foobar0' function
foobar0(x, z)
rm(x_foobar0)
# Excuting 'foobar0' function
foobar0(x, z)
set.seed(1)
x <- rnorm(100)
z <- rnorm(100)
foobar <- function(x, z) {
# Checking input
cond <- function(i){
if (sum(x >= 0.001*i) < i){
stop(paste("step", i, "requires", i, "observation(s) with value >=", 0.001*i))
}
}
# Calculating function
cal <- function(x, z){
fit <- lm(x ~z)
r <- fit$residuals
assign("x_foobar", i*sin(r) + 0.01*i, envir = globalenv())
}
# Doing Iteration
for (i in 1:4){
cond(i)
cal(x, z)
}
}
rm(x_foobar)
# Executing foobar function
foobar(x,z)
all.equal(x_origin, x_foobar)
all.equal(x_origin, x_foobar0)
## 'foobar0' function
set.seed(1)
x <- rnorm(100)
z <- rnorm(100)
foobar <- function(x, z) {
# Checking input
cond <- function(i){
if (sum(x >= 0.001*i) < i){
stop(paste("step", i, "requires", i, "observation(s) with value >=", 0.001*i))
}
}
# Calculating function
cal <- function(x, z){
fit <- lm(x ~z)
r <- fit$residuals
assign("x_foobar", i*sin(r) + 0.01*i, envir = globalenv())
}
# Doing Iteration
for (i in 1:4){
cond(i)
cal(x, z)
}
}
# Executing foobar function
foobar(x,z)
foobar <- function(x, z) {
# Checking input
cond <- function(i){
if (sum(x >= 0.001*i) < i){
stop(paste("step", i, "requires", i, "observation(s) with value >=", 0.001*i))
}
}
# Calculating function
cal <- function(x, z){
fit <- lm(x ~z)
r <- fit$residuals
assign("x_foobar", i*sin(r) + 0.01*i, envir = parent.env(environment()))
}
# Doing Iteration
for (i in 1:4){
cond(i)
cal(x, z)
}
}
# Executing foobar function
foobar(x,z)
rm(x_foobar)
# Executing foobar function
foobar(x,z)
foobar <- function(x, z) {
# Checking input
cond <- function(i){
if (sum(x >= 0.001*i) < i){
stop(paste("step", i, "requires", i, "observation(s) with value >=", 0.001*i))
}
}
# Calculating function
cal <- function(x, z){
fit <- lm(x ~z)
r <- fit$residuals
assign("x", i*sin(r) + 0.01*i, envir = parent.env(environment()))
}
# Doing Iteration
for (i in 1:4){
cond(i)
cal(x, z)
}
# Storing the result in 'x_foobar' object in the global environment
assign("x_foobar", x, envir = parent.env(environment()))
}
rm(x_foobar)
# Executing foobar function
foobar(x,z)
all.equal(x_foobar0, x_foobar)
## 'foobar0' function
set.seed(1)
x <- rnorm(100)
z <- rnorm(100)
foobar0 <- function(x, z) {
# Sample code
if (sum(x >= .001) < 1) {
stop("step 1 requires 1 observation(s) with value >= .001")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- sin(r) + .01
if (sum(x >= .002) < 2) {
stop("step 2 requires 2 observation(s) with value >= .002")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 2 * sin(r) + .02
if (sum(x >= .003) < 3) {
stop("step 3 requires 3 observation(s) with value >= .003")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 3 * sin(r) + .03
if (sum(x >= .004) < 4) {
stop("step 4 requires 4 observation(s) with value >= .004")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 4 * sin(r) + .04
# Storing the result in the 'x_foobar0' object in the global environment
assign("x_foobar0", x, envir = parent.env(environment()))
}
# Excuting 'foobar0' function
foobar0(x, z)
foobar <- function(x, z) {
# Checking input
cond <- function(i){
if (sum(x >= 0.001*i) < i){
stop(paste("step", i, "requires", i, "observation(s) with value >=", 0.001*i))
}
}
# Calculating function
cal <- function(x, z){
fit <- lm(x ~z)
r <- fit$residuals
assign("x", i*sin(r) + 0.01*i, envir = parent.env(environment()))
}
# Doing Iteration
for (i in 1:4){
cond(i)
cal(x, z)
}
# Storing the result in 'x_foobar' object in the global environment
assign("x_foobar", x, envir = parent.env(environment()))
}
# Executing foobar function
foobar(x,z)
all.equal(x_foobar0, x_foobar)
n <- 30
p <- 50
p2 <- 25
m <- 1000
set.seed(1)
x <- matrix(rnorm(n*p),nrow=n,ncol=p)
b <- matrix(rnorm(m*p),nrow=m,ncol=p)
a <- matrix(rnorm(m*p2),nrow=m,ncol=p2)
f0 <- function(x, b, a) {
out <- numeric(0)
for (i in seq_len(m)) {
bb <- b[i, ]
aa <- a[i, ]
out <- c(out, sum(x %*% bb) + sum(aa))
}
out
}
f0(x, b, a)
bb <- b[1,]
bb
x %*% bb
f <- function(x, b, a){
}
x
bb
str(x)
str(bb)
class(x)
class(bb)
x %*% bb
t(bb)
x %*% t(bb)
class(bb)
x %*% bb
f0(x, b, a)
colSums(x %*% t(b))
rowSums(a)
colSums(x %*% t(b)) + rowSums(a)
all.equal(f0(x, b, a), colSums(x %*% t(b)) + rowSums(a))
f <- function(x, b, a){
colSums(x %*% t(b)) + rowSums(a)
}
microbenchmark(f0(x, b, a), f(x, b, a))
all.equal(f0(x, b, a), f(x, b, a))
n <- 30
p <- 50
p2 <- 25
m <- 1000
set.seed(1)
x <- matrix(rnorm(n*p),nrow=n,ncol=p)
b <- matrix(rnorm(m*p),nrow=m,ncol=p)
a <- matrix(rnorm(m*p2),nrow=m,ncol=p2)
# Original f0 function
f0 <- function(x, b, a) {
out <- numeric(0)
for (i in seq_len(m)) {
bb <- b[i, ]
aa <- a[i, ]
out <- c(out, sum(x %*% bb) + sum(aa))
}
out
}
# Making f function
f <- function(x, b, a){
colSums(x %*% t(b)) + rowSums(a)
}
# Comparing the results
all.equal(f0(x, b, a), f(x, b, a))
library(microbenchmark)
microbenchmark(f0(x, b, a), f(x, b, a))
microbenchmark(f0(x, b, a), f(x, b, a))
m <- 400
n <- 50
little.n <- n/2
set.seed(1)
x <- matrix(rnorm(m*n),nrow=m,ncol=n)
f <- gl(2,little.n)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
unname(ts)
}
getT0(x, f)
?gl
f
?sapply
seq_len(m)
getT0(x, f)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
}
getT0(x, f)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
ts
}
getT0(x, f)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
unnames(ts)
}
getT0(x, f)
unname(ts)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
unname(ts)
}
getT0(x, f)
?as.factor
?t.test
x
t.test(t(x) ~ f, var.equal=TRUE)
t(x)
t.test(t(x) ~ f, var.equal=TRUE)$statistic
t.test(x, x)
t.test(x, x)$statistic
rowttests
install.packages("genefilter")
library(genefilter)
install.packages("genefilter")
x
rowMeans(x[,1:little.n])
rowMeans(x[, little.n:ncol(x)])
rowSds(x)
sd(x)
t1 <- matrix(1:4, ncol = 2)
t1^2sd(x)
t1^2
rowMeans(x)
rowSums(x - rowMeans(x))
x
t1
rowMeans(x)
rowMeans(t1)
t1 - rowMeans(t1)
(rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/littile.n + 1/little.n))
(rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
t0 <- (rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
getT0(x, f)
all.equal(getT0(x,f), t0)
ncol(x)
t0 <- (rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n+1:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
all.equal(getT0(x,f), t0)
t0 <- (rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n+1:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
t0 <- (rowMeans(x[, 1:little.n]) - rowMeans(x[, (little.n+1):ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
all.equal(getT0(x,f), t0)
x[, (little.n+1):ncol(x)]
t0 <- (rowMeans(x[, 1:little.n]) - rowMeans(x[, (little.n+1):ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
all.equal(getT0(x,f), t0)
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
f
x[1,]
x[1, (little.n+1):ncol(x)]
t0
getT0(x,f)
t1 <- matrix(1:4, ncol = 2)
t1 - rowMeans(t1)
rowSums((t1 - rowMeans(t1))^2)
sqrt(rowSums((t1 - rowMeans(t1))^2))
sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
x[1,]
sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)
sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE))
attributes(t.test)
class(t.test)
str(t.test)
?t.test
sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$stderr)
sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
rowSums((x - rowMeans(x))^2)
x
x - rowMeans(x)
rowMeans(x)
x[1,]
rowMeans(x[1,])
rowMeans(x)[1]
x[1,] - rowMeans(x)[1]
# Making getT function
getT <- function(x, f){
(rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
}
microbenchmark(
getT0(x,f),
getT(x,f)
)
# Making getT function
getT <- function(x){
(rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
}
microbenchmark(
getT0(x,f),
getT(x)
)
microbenchmark(getT(x))
microbenchmark(getT0(x,f ))
microbenchmark(
getT0(x,f),
getT(x)
)
1/little.n
sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$stderr)
sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
sqrt((rowSums((x - rowMeans(x))^2)/ncol(x))*(1/little.n + 1/little.n))
sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$stderr)
sqrt((rowSums((x - rowMeans(x))^2)/(ncol(x)-1)*(1/little.n + 1/little.n))
sqrt((rowSums((x - rowMeans(x))^2)/(ncol(x)-1)*(1/little.n + 1/little.n))
sqrt((rowSums((x - rowMeans(x))^2)/(ncol(x)-1))*(1/little.n + 1/little.n))
sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$stderr)
# Making getT function
getT <- function(x){
x1 <- x[, 1:little.n]
x2 <- x[, (little.n + 1):ncol(x)]
mean_diff <- rowMeans(x1) - rowMeans(x2)
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(little.n - 2)
mean_diff/sqrt(pooled_var)
}
all.equal(getT0(x,f), getT(x))
getT(x)
mean_diff/sqrt(pooled_var*(1/little.n + 1/little.n))
# Making getT function
getT <- function(x){
x1 <- x[, 1:little.n]
x2 <- x[, (little.n + 1):ncol(x)]
mean_diff <- rowMeans(x1) - rowMeans(x2)
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(little.n - 2)
mean_diff/sqrt(pooled_var*(1/little.n + 1/little.n))
}
getT(x)
all.equal(getT0(x,f), getT(x))
getT(x)
getT0(x,f)
# Making getT function
getT <- function(x){
x1 <- x[, 1:little.n]
x2 <- x[, (little.n + 1):ncol(x)]
mean_diff <- rowMeans(x1) - rowMeans(x2)
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(2*little.n - 2)
mean_diff/sqrt(pooled_var*(1/little.n + 1/little.n))
}
# Making getT function
getT <- function(x){
x1 <- x[, 1:little.n]
x2 <- x[, (little.n + 1):ncol(x)]
mean_diff <- rowMeans(x1) - rowMeans(x2)
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(n - 2)
mean_diff/sqrt(pooled_var*(1/little.n + 1/little.n))
}
getT(x)
getT0(x,f)
all.equal(getT0(x,f), getT(x))
microbenchmark(
getT0(x,f),
getT(x)
)
m <- 400
n <- 50
little.n <- n/2
set.seed(1)
x <- matrix(rnorm(m*n),nrow=m,ncol=n)
f <- gl(2,little.n)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
unname(ts)
}
# Making getT function
getT <- function(x){
# Spliting the data
x1 <- x[, 1:little.n]
x2 <- x[, (little.n + 1):ncol(x)]
# Calculating mean difference and pooled sample variance
mean_diff <- rowMeans(x1) - rowMeans(x2)
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(n - 2)
# Calculating t-statistic
mean_diff/sqrt(pooled_var*(1/little.n + 1/little.n))
}
# Comparing the results
all.equal(getT0(x,f), getT(x))
# Comparing the results
all.equal(getT0(x,f), getT(x))
microbenchmark(getT0(x,f), getT(x))
##Sparse data
library(Matrix)
library(glmnet)
#glm net
install.packages("glmnet")
library(glmnet)
#glm net
install.packages("glmnet")
library(glmnet)
beta <- rep(c(1,0), c(50,950))
beta
n <- 1e3
nn <- 1e5
s2 <- sparseMatrix(i = sample(n, nn, TRUE),
j = sample(n, nn, TRUE),
dims = list(n,n))
y <- s2 %*% beta + rnorm(n, 0, 0.25)
fit <- glmnet(x, y, family="gaussian", alpha = 1)
fit <- glmnet(s2, y, family="gaussian", alpha = 1)
plot(fit)
library(data.table)
setwd("D:/Spring_2022_D/BIOS735/hw/bios735")
setwd("D:/Spring_2022_D/BIOS735/hw/bios735/hw4")
setwd("D:/Spring_2022_D/BIOS735/hw/hw4")
setwd("D:/Spring_2022_D/BIOS735/hw/hw4")
setwd("D:/Spring_2022_D/BIOS735/hw/hw4")

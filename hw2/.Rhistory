p <- 50
p2 <- 25
m <- 1000
set.seed(1)
x <- matrix(rnorm(n*p),nrow=n,ncol=p)
b <- matrix(rnorm(m*p),nrow=m,ncol=p)
a <- matrix(rnorm(m*p2),nrow=m,ncol=p2)
f0 <- function(x, b, a) {
out <- numeric(0)
for (i in seq_len(m)) {
bb <- b[i, ]
aa <- a[i, ]
out <- c(out, sum(x %*% bb) + sum(aa))
}
out
}
f0(x, b, a)
bb <- b[1,]
bb
x %*% bb
f <- function(x, b, a){
}
x
bb
str(x)
str(bb)
class(x)
class(bb)
x %*% bb
t(bb)
x %*% t(bb)
class(bb)
x %*% bb
f0(x, b, a)
colSums(x %*% t(b))
rowSums(a)
colSums(x %*% t(b)) + rowSums(a)
all.equal(f0(x, b, a), colSums(x %*% t(b)) + rowSums(a))
f <- function(x, b, a){
colSums(x %*% t(b)) + rowSums(a)
}
microbenchmark(f0(x, b, a), f(x, b, a))
all.equal(f0(x, b, a), f(x, b, a))
n <- 30
p <- 50
p2 <- 25
m <- 1000
set.seed(1)
x <- matrix(rnorm(n*p),nrow=n,ncol=p)
b <- matrix(rnorm(m*p),nrow=m,ncol=p)
a <- matrix(rnorm(m*p2),nrow=m,ncol=p2)
# Original f0 function
f0 <- function(x, b, a) {
out <- numeric(0)
for (i in seq_len(m)) {
bb <- b[i, ]
aa <- a[i, ]
out <- c(out, sum(x %*% bb) + sum(aa))
}
out
}
# Making f function
f <- function(x, b, a){
colSums(x %*% t(b)) + rowSums(a)
}
# Comparing the results
all.equal(f0(x, b, a), f(x, b, a))
library(microbenchmark)
microbenchmark(f0(x, b, a), f(x, b, a))
microbenchmark(f0(x, b, a), f(x, b, a))
m <- 400
n <- 50
little.n <- n/2
set.seed(1)
x <- matrix(rnorm(m*n),nrow=m,ncol=n)
f <- gl(2,little.n)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
unname(ts)
}
getT0(x, f)
?gl
f
?sapply
seq_len(m)
getT0(x, f)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
}
getT0(x, f)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
ts
}
getT0(x, f)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
unnames(ts)
}
getT0(x, f)
unname(ts)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
unname(ts)
}
getT0(x, f)
?as.factor
?t.test
x
t.test(t(x) ~ f, var.equal=TRUE)
t(x)
t.test(t(x) ~ f, var.equal=TRUE)$statistic
t.test(x, x)
t.test(x, x)$statistic
rowttests
install.packages("genefilter")
library(genefilter)
install.packages("genefilter")
x
rowMeans(x[,1:little.n])
rowMeans(x[, little.n:ncol(x)])
rowSds(x)
sd(x)
t1 <- matrix(1:4, ncol = 2)
t1^2sd(x)
t1^2
rowMeans(x)
rowSums(x - rowMeans(x))
x
t1
rowMeans(x)
rowMeans(t1)
t1 - rowMeans(t1)
(rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/littile.n + 1/little.n))
(rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
t0 <- (rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
getT0(x, f)
all.equal(getT0(x,f), t0)
ncol(x)
t0 <- (rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n+1:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
all.equal(getT0(x,f), t0)
t0 <- (rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n+1:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
t0 <- (rowMeans(x[, 1:little.n]) - rowMeans(x[, (little.n+1):ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
all.equal(getT0(x,f), t0)
x[, (little.n+1):ncol(x)]
t0 <- (rowMeans(x[, 1:little.n]) - rowMeans(x[, (little.n+1):ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
all.equal(getT0(x,f), t0)
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
f
x[1,]
x[1, (little.n+1):ncol(x)]
t0
getT0(x,f)
t1 <- matrix(1:4, ncol = 2)
t1 - rowMeans(t1)
rowSums((t1 - rowMeans(t1))^2)
sqrt(rowSums((t1 - rowMeans(t1))^2))
sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
x[1,]
sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)
sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE))
attributes(t.test)
class(t.test)
str(t.test)
?t.test
sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$stderr)
sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
rowSums((x - rowMeans(x))^2)
x
x - rowMeans(x)
rowMeans(x)
x[1,]
rowMeans(x[1,])
rowMeans(x)[1]
x[1,] - rowMeans(x)[1]
# Making getT function
getT <- function(x, f){
(rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
}
microbenchmark(
getT0(x,f),
getT(x,f)
)
# Making getT function
getT <- function(x){
(rowMeans(x[, 1:little.n]) - rowMeans(x[, little.n:ncol(x)]))/sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
}
microbenchmark(
getT0(x,f),
getT(x)
)
microbenchmark(getT(x))
microbenchmark(getT0(x,f ))
microbenchmark(
getT0(x,f),
getT(x)
)
1/little.n
sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$stderr)
sqrt(rowSums((x - rowMeans(x))^2)*(1/little.n + 1/little.n))
sqrt((rowSums((x - rowMeans(x))^2)/ncol(x))*(1/little.n + 1/little.n))
sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$stderr)
sqrt((rowSums((x - rowMeans(x))^2)/(ncol(x)-1)*(1/little.n + 1/little.n))
sqrt((rowSums((x - rowMeans(x))^2)/(ncol(x)-1)*(1/little.n + 1/little.n))
sqrt((rowSums((x - rowMeans(x))^2)/(ncol(x)-1))*(1/little.n + 1/little.n))
sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$stderr)
# Making getT function
getT <- function(x){
x1 <- x[, 1:little.n]
x2 <- x[, (little.n + 1):ncol(x)]
mean_diff <- rowMeans(x1) - rowMeans(x2)
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(little.n - 2)
mean_diff/sqrt(pooled_var)
}
all.equal(getT0(x,f), getT(x))
getT(x)
mean_diff/sqrt(pooled_var*(1/little.n + 1/little.n))
# Making getT function
getT <- function(x){
x1 <- x[, 1:little.n]
x2 <- x[, (little.n + 1):ncol(x)]
mean_diff <- rowMeans(x1) - rowMeans(x2)
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(little.n - 2)
mean_diff/sqrt(pooled_var*(1/little.n + 1/little.n))
}
getT(x)
all.equal(getT0(x,f), getT(x))
getT(x)
getT0(x,f)
# Making getT function
getT <- function(x){
x1 <- x[, 1:little.n]
x2 <- x[, (little.n + 1):ncol(x)]
mean_diff <- rowMeans(x1) - rowMeans(x2)
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(2*little.n - 2)
mean_diff/sqrt(pooled_var*(1/little.n + 1/little.n))
}
# Making getT function
getT <- function(x){
x1 <- x[, 1:little.n]
x2 <- x[, (little.n + 1):ncol(x)]
mean_diff <- rowMeans(x1) - rowMeans(x2)
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(n - 2)
mean_diff/sqrt(pooled_var*(1/little.n + 1/little.n))
}
getT(x)
getT0(x,f)
all.equal(getT0(x,f), getT(x))
microbenchmark(
getT0(x,f),
getT(x)
)
m <- 400
n <- 50
little.n <- n/2
set.seed(1)
x <- matrix(rnorm(m*n),nrow=m,ncol=n)
f <- gl(2,little.n)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
unname(ts)
}
# Making getT function
getT <- function(x){
# Spliting the data
x1 <- x[, 1:little.n]
x2 <- x[, (little.n + 1):ncol(x)]
# Calculating mean difference and pooled sample variance
mean_diff <- rowMeans(x1) - rowMeans(x2)
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(n - 2)
# Calculating t-statistic
mean_diff/sqrt(pooled_var*(1/little.n + 1/little.n))
}
# Comparing the results
all.equal(getT0(x,f), getT(x))
# Comparing the results
all.equal(getT0(x,f), getT(x))
microbenchmark(getT0(x,f), getT(x))
# library setting
library(usethis)
library(devtools)
# Test
library(testthat)
# test
setwd("D:/Spring_2022_D/BIOS735/hw")
load_all("bios735")
document("./bios735")
getT(matrix(rnorm(20), nrow=2), gl(2, 5))
getT(data.frame(matrix(rnorm(20), nrow=2)), gl(2, 5))
set.seed(1)
set.seed(1)
getT(data.frame(matrix(rnorm(20), nrow=2)), gl(2, 5))
)
)
set.seed(1)
getT(matrix(rnorm(20), nrow=2), gl(2, 5))
test_file("bios735/tests/testthat/test-getT.R")
check(manual=TRUE)
setwd("D:/Spring_2022_D/BIOS735/hw/bios735")
check(manual=TRUE)
# Check
?getT
load_all("bios735")
# test
setwd("D:/Spring_2022_D/BIOS735/hw")
load_all("bios735")
getT <- function(x, f){
# warning
if (ncol(x) != length(f)){
warning("The number of columns of the matrix doesn't match the length of the two level vector")
}
# error
if (length(levels(f)) != 2){
stop("The level of the level vector is not two")
}
# Spliting the data
x1 <- x[,f == levels(f)[1]]
x2 <- x[,f == levels(f)[2]]
# Calculating mean difference and pooled sample variance
mean_diff <- rowMeans(x1) - rowMeans(x2)
#pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2)
# error
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))2))/(ncol(x1) + ncol(x2) - 2)
# Calculating t-statistic
mean_diff/sqrt(pooled_var*(1/ncol(x1) + 1/ncol(x2)))
}
getT <- function(x, f){
# warning
if (ncol(x) != length(f)){
warning("The number of columns of the matrix doesn't match the length of the two level vector")
}
# error
if (length(levels(f)) != 2){
stop("The level of the level vector is not two")
}
# Spliting the data
x1 <- x[,f == levels(f)[1]]
x2 <- x[,f == levels(f)[2]]
# Calculating mean difference and pooled sample variance
mean_diff <- rowMeans(x1) - rowMeans(x2)
#pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2)
# error
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2) + "error"
# Calculating t-statistic
mean_diff/sqrt(pooled_var*(1/ncol(x1) + 1/ncol(x2)))
}
x <- matrix(rnorm(400*50),nrow=400)
f <- gl(2,ncol(x)/2)
getT(x, f)
browser()
getT <- function(x, f){
browser()
# warning
if (ncol(x) != length(f)){
warning("The number of columns of the matrix doesn't match the length of the two level vector")
}
# error
if (length(levels(f)) != 2){
stop("The level of the level vector is not two")
}
# Spliting the data
x1 <- x[,f == levels(f)[1]]
x2 <- x[,f == levels(f)[2]]
# Calculating mean difference and pooled sample variance
mean_diff <- rowMeans(x1) - rowMeans(x2)
#pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2)
# error
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2) + "error"
# Calculating t-statistic
mean_diff/sqrt(pooled_var*(1/ncol(x1) + 1/ncol(x2)))
}
getT(x, f)
pooled_var
q
getT <- function(x, f){
# warning
if (ncol(x) != length(f)){
warning("The number of columns of the matrix doesn't match the length of the two level vector")
}
# error
if (length(levels(f)) != 2){
stop("The level of the level vector is not two")
}
# Spliting the data
x1 <- x[,f == levels(f)[1]]
x2 <- x[,f == levels(f)[2]]
# Calculating mean difference and pooled sample variance
mean_diff <- rowMeans(x1) - rowMeans(x2)
#pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2)
# error
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2) + "error"
# Calculating t-statistic
mean_diff/sqrt(pooled_var*(1/ncol(x1) + 1/ncol(x2)))
browser()
}
getT(x, f)
getT <- function(x, f){
browser()
# warning
if (ncol(x) != length(f)){
warning("The number of columns of the matrix doesn't match the length of the two level vector")
}
# error
if (length(levels(f)) != 2){
stop("The level of the level vector is not two")
}
# Spliting the data
x1 <- x[,f == levels(f)[1]]
x2 <- x[,f == levels(f)[2]]
# Calculating mean difference and pooled sample variance
mean_diff <- rowMeans(x1) - rowMeans(x2)
#pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2)
# error
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2) + "error"
# Calculating t-statistic
mean_diff/sqrt(pooled_var*(1/ncol(x1) + 1/ncol(x2)))
}
getT(x, f)
ls()
getT(x, f)
ls()
ls()
ls()
traceback()
getT(x, f)
getT <- function(x, f){
# warning
if (ncol(x) != length(f)){
warning("The number of columns of the matrix doesn't match the length of the two level vector")
}
# error
if (length(levels(f)) != 2){
stop("The level of the level vector is not two")
}
# Spliting the data
x1 <- x[,f == levels(f)[1]]
x2 <- x[,f == levels(f)[2]]
# Calculating mean difference and pooled sample variance
mean_diff <- rowMeans(x1) - rowMeans(x2)
#pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2)
# error
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2) + "error"
# Calculating t-statistic
mean_diff/sqrt(pooled_var*(1/ncol(x1) + 1/ncol(x2)))
}
getT(x, f)
traceback()
getT <- function(x, f){
browser()
# warning
if (ncol(x) != length(f)){
warning("The number of columns of the matrix doesn't match the length of the two level vector")
}
# error
if (length(levels(f)) != 2){
stop("The level of the level vector is not two")
}
# Spliting the data
x1 <- x[,f == levels(f)[1]]
x2 <- x[,f == levels(f)[2]]
# Calculating mean difference and pooled sample variance
mean_diff <- rowMeans(x1) - rowMeans(x2)
#pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2)
# error
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2) + "error"
# Calculating t-statistic
mean_diff/sqrt(pooled_var*(1/ncol(x1) + 1/ncol(x2)))
}
m <- 400
n <- 50
little.n <- n/2
set.seed(1)
x <- matrix(rnorm(m*n),nrow=m,ncol=n)
f <- gl(2,little.n)
getT(x,f)
ls()
getT <- function(x, f){
browser()
# warning
if (ncol(x) != length(f)){
warning("The number of columns of the matrix doesn't match the length of the two level vector")
}
# error
if (length(levels(f)) != 2){
stop("The level of the level vector is not two")
}
# Spliting the data
x1 <- x[,f == levels(f)[1]]
x2 <- x[,f == levels(f)[2]]
# Calculating mean difference and pooled sample variance
mean_diff <- rowMeans(x1) - rowMeans(x2)
#pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2)
# error
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(ncol(x1) + ncol(x2) - 2) + "error"
# Calculating t-statistic
mean_diff/sqrt(pooled_var*(1/ncol(x1) + 1/ncol(x2)))
}
m <- 400
n <- 50
little.n <- n/2
set.seed(1)
x <- matrix(rnorm(m*n),nrow=m,ncol=n)
f <- gl(2,little.n)
getT(x,f)
ls()

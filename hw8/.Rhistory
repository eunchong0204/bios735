# Calculate new nodes and weights
t <- muhat_yi + sqrt(2 * as.numeric(sigma2hat_yi)) * nodes_over_gamma
w <- gh$weights / sqrt(pi)
# Approximate the integral by subject
val[i] <- sum(
w * h_t(
t = t,
yi = yi,
beta = beta,
s2gamma = s2gamma,
muhat = muhat_yi,
sigma2hat = sigma2hat_yi
)
)
}
# Calculate Log-likelihood
return(sum(log(val)))
}
## 3. Optimization using Nelder-Mead
fit <- optimx(
par = c(beta, s2gamma),
fn = function(x, M){integr(theta=x, M)},
M = 1,
method = "Nelder-Mead",
control = list(maximize = T)
)
View(fit)
## 2. Integration
# This function calculates Log-likelihood given beta and s2gamma
# theta consists of beta and s2gamma
# M is the number of nodes
integr <- function(theta, M) {
# Split theta into beta and s2gama
beta <- theta[1:2]
s2gamma <- theta[3]
# Finds nodes and weights
gh <- gauss.quad(n = M, kind = "hermite")
nodes_over_gamma <- gh$nodes
# Create NA vector
val <- rep(NA, max(alz$subject))
# Looping
for (i in 1:max(alz$subject)) {
# Subset data by subject
yi <- alz$words[alz$subject == i]
# Calculate muhat and sigma2hat by subject
muhat_yi <- muhat(yi, beta, s2gamma)
sigma2hat_yi <- sigma2hat(muhat_yi, yi, beta, s2gamma, inner)
# Calculate new nodes and weights
t <- muhat_yi + sqrt(2 * as.numeric(sigma2hat_yi)) * nodes_over_gamma
w <- gh$weights / sqrt(pi)
# Approximate the integral by subject
val[i] <- sum(
w * h_t(
t = t,
yi = yi,
beta = beta,
s2gamma = s2gamma,
muhat = muhat_yi,
sigma2hat = sigma2hat_yi
)
)
}
# Calculate Log-likelihood
#return(sum(log(val)))
# Calculate Likelihood
return(prod(val))
}
## 3. Optimization using Nelder-Mead
fit2 <- optimx(
par = c(beta, s2gamma),
fn = function(x, M){integr(theta=x, M)},
M = 1,
method = "Nelder-Mead",
control = list(maximize = T)
)
View(fit2)
View(fit)
library(statmod)
library(optimx)
library(numDeriv)
# input data
setwd("D:/Spring_2022_D/BIOS735/hw/hw7")
alz = read.table("alzheimers.dat", header = T)
xi <- cbind(rep(1,5), 1:5)
# Starting value
beta = c(1.804, 0.165)
s2gamma = 0.000225
## 1. Integration related helper functions
# 1-1. Create integrand function for ith subject
# This needs to calculate muhat and sigma2hat for aGQ
inner <- function(gammai, yi, beta, s2gamma, log = F){
val <- rep(NA, length(gammai))
for (i in 1:length(val)){
lambda <- exp(xi %*% beta + gammai[i])
val0 <- dpois(x = yi, lambda = lambda)
val[i] <- prod(val0) * dnorm(x = gammai[i],
mean = 0,
sd = sqrt(s2gamma))
}
if (log == F){
return(val)
} else{
return(log(val))
}
}
# 1-2. Create a function calculating the posterior mode of the integrand (=muhat)
muhat <- function(yi, beta, s2gamma) {
pm <- suppressWarnings(
optimx(
par = 0,
fn = function(x, yi, beta, s2gamma) {
inner(
gammai = x,
yi = yi,
beta = beta,
s2gamma = s2gamma
)
},
yi = yi,
beta = beta,
s2gamma = s2gamma,
method = "Nelder-Mead",
control = list(maximize = T)
)
)
return(pm$p1)
}
# 1-3. Create a function calculating a sigma2hat
sigma2hat <- function(muhat, yi, beta, s2gamma, inner) {
hess_pm <- hessian(
func = inner,
x = muhat,
yi = yi,
beta = beta,
s2gamma = s2gamma,
log = T
)
return(-1 / hess_pm)
}
# 1-4 Create h(x) function
# Integrad factors into h(x)*pi(gammai|muhat,sigma2hat)
# t is adjusted nodes
h_t <- function(t, yi, beta, s2gamma, muhat, sigma2hat){
val <- rep(NA, length(t))
for (i in 1:length(val)){
lambda <- exp(xi %*% beta + t[i])
val0 <- dpois(x = yi, lambda = lambda)
val[i] <- prod(val0) *
dnorm(x = t[i], mean = 0, sd = sqrt(s2gamma)) /
dnorm(x = t[i], mean = muhat, sd = sqrt(sigma2hat))
}
return(val)
}
## 2. Integration
# This function calculates Log-likelihood given beta and s2gamma
# theta consists of beta and s2gamma
# M is the number of nodes
# output is total Log-likelihood
integr_ll <- function(theta, M) {
# Split theta into beta and s2gama
beta <- theta[1:2]
s2gamma <- theta[3]
# Finds nodes and weights
gh <- gauss.quad(n = M, kind = "hermite")
nodes_over_gamma <- gh$nodes
# Create NA vector
val <- rep(NA, max(alz$subject))
# Looping
for (i in 1:max(alz$subject)) {
# Subset data by subject
yi <- alz$words[alz$subject == i]
# Calculate muhat and sigma2hat by subject
muhat_yi <- muhat(yi, beta, s2gamma)
sigma2hat_yi <- sigma2hat(muhat_yi, yi, beta, s2gamma, inner)
# Calculate new nodes and weights
t <- muhat_yi + sqrt(2 * as.numeric(sigma2hat_yi)) * nodes_over_gamma
w <- gh$weights / sqrt(pi)
# Approximate the integral by subject
val[i] <- sum(
w * h_t(
t = t,
yi = yi,
beta = beta,
s2gamma = s2gamma,
muhat = muhat_yi,
sigma2hat = sigma2hat_yi
)
)
}
# Calculate Log-likelihood
return(sum(log(val)))
# Calculate Likelihood
#return(prod(val))
}
## 3. Optimization using Nelder-Mead
fit <- optimx(
par = c(beta, s2gamma),
fn = function(x, M){integr_ll(theta=x, M)},
M = 5,
method = "Nelder-Mead",
control = list(maximize = T)
)
View(fit)
fit
## 3. Optimization using Nelder-Mead
fit <- optimx(
par = c(beta, s2gamma),
fn = function(x, M){integr_ll(theta=x, M)},
M = 1,
method = "Nelder-Mead",
control = list(maximize = T)
)
View(fit)
fit
## 2. Integration
# This function calculates Log-likelihood given beta and s2gamma
# theta consists of beta and s2gamma
# M is the number of nodes
# output is total Log-likelihood
integr_ll <- function(theta, M) {
# Split theta into beta and s2gama
beta <- theta[1:2]
s2gamma <- theta[3]
# Finds nodes and weights
gh <- gauss.quad(n = M, kind = "hermite")
nodes_over_gamma <- gh$nodes
# Create NA vector
val <- rep(NA, max(alz$subject))
# Looping
for (i in 1:max(alz$subject)) {
# Subset data by subject
yi <- alz$words[alz$subject == i]
# Calculate muhat and sigma2hat by subject
muhat_yi <- muhat(yi, beta, s2gamma)
sigma2hat_yi <- sigma2hat(muhat_yi, yi, beta, s2gamma, inner)
# Calculate new nodes and weights
t <- muhat_yi + sqrt(2 * as.numeric(sigma2hat_yi)) * nodes_over_gamma
w <- gh$weights / sqrt(pi)
# Approximate the integral by subject
val[i] <- sum(
w * h_t(
t = t,
yi = yi,
beta = beta,
s2gamma = s2gamma,
muhat = muhat_yi,
sigma2hat = sigma2hat_yi
)
)
}
# Calculate Log-likelihood
#return(sum(log(val)))
# Calculate Likelihood
return(prod(val))
}
## 3. Optimization using Nelder-Mead
fit <- optimx(
par = c(beta, s2gamma),
fn = function(x, M){integr_ll(theta=x, M)},
M = 5,
method = "Nelder-Mead",
control = list(maximize = T)
)
fit
## 2. Integration
# This function calculates Log-likelihood given beta and s2gamma
# theta consists of beta and s2gamma
# M is the number of nodes
# output is total Log-likelihood
integr_ll <- function(theta, M) {
# Split theta into beta and s2gama
beta <- theta[1:2]
s2gamma <- theta[3]
# Finds nodes and weights
gh <- gauss.quad(n = M, kind = "hermite")
nodes_over_gamma <- gh$nodes
# Create NA vector
val <- rep(NA, max(alz$subject))
# Looping
for (i in 1:max(alz$subject)) {
# Subset data by subject
yi <- alz$words[alz$subject == i]
# Calculate muhat and sigma2hat by subject
muhat_yi <- muhat(yi, beta, s2gamma)
sigma2hat_yi <- sigma2hat(muhat_yi, yi, beta, s2gamma, inner)
# Calculate new nodes and weights
t <- muhat_yi + sqrt(2 * as.numeric(sigma2hat_yi)) * nodes_over_gamma
w <- gh$weights / sqrt(pi)
# Approximate the integral by subject
val[i] <- sum(
w * h_t(
t = t,
yi = yi,
beta = beta,
s2gamma = s2gamma,
muhat = muhat_yi,
sigma2hat = sigma2hat_yi
)
)
}
# Calculate Log-likelihood
return(sum(log(val)))
# Calculate Likelihood
#return(prod(val))
}
## 3. Optimization using Nelder-Mead
fit <- optimx(
par = c(beta, s2gamma),
fn = function(x, M){integr_ll(theta=x, M)},
M = 5,
method = "Nelder-Mead",
control = list(maximize = T)
)
View(fit)
beta_fitted <- c(1.819893, 0.1657523)
exp(xi %*% beta_fitted
exp(xi %*% beta_fitted)
library(tidyverse)
View(alz)
alz %>% group_by(month) %>% summarise(mean)
alz %>% group_by(month) %>% summarise(mean=mean(words))
str(alz)
rep(23,5)
alz_fitted <- data.frame(subject = c(rep(23,5)), month = rep(1:5), words=exp(xi %*% beta_fitted))
View(alz_fitted)
ggplot(alz, aes(month, words)) +
geom_line()
ggplot(alz, aes(month, words)) +
geom_line(group_by(subject))
ggplot(alz, aes(month, words)) +
geom_line(group(subject))
ggplot(alz, aes(month, words)) +
geom_line(group=subject)
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line()
alz_fitted <- data.frame(subject = factor(c(rep(23,5))), month = rep(1:5), words=exp(xi %*% beta_fitted))
View(alz_fitted)
alz_factor <- as.factor(alz$subject)
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line()
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line()
ggplot(alz_factor, aes(month, words, color=subject, group=subject)) +
geom_line()
f
alz_factor <- as.factor(alz$subject)
ggplot(alz_factor, aes(month, words, color=subject, group=subject)) +
geom_line()
alz$subject <- as.factor(alz$subject)
ggplot(alz_factor, aes(month, words, color=subject, group=subject)) +
geom_line()
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line()
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line() +
geom_line(alz_fitted, aes(month, words))
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line() +
geom_line(alz_fitted, aes(month, words,color=subject, group=subject))
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line() +
geom_line(alz_fitted)
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line()
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line() +
theme(legend.position = "none") +
coord_cartesian(ylim=c(0,25)) +
labs(x= "MONTH", y="WORDs") +
scale_y_continuous(breaks=seq(0, 25, 5))
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line() +
theme(legend.position = "none") +
coord_cartesian(ylim=c(0,25)) +
scale_y_continuous(breaks=seq(0, 25, 5))
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line() +
theme(legend.position = "none") +
title("Spaghetti plot with the fitted line")
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line() +
theme(legend.position = "none") +
title("Spaghetti plot with the fitted line") +
coord_cartesian(ylim=c(0,25)) +
scale_y_continuous(breaks=seq(0, 25, 5))
ggplot(alz, aes(month, words, color=subject, group=subject)) +
geom_line() +
theme(legend.position = "none") +
ggtitle("Spaghetti plot with the fitted line") +
coord_cartesian(ylim=c(0,25)) +
scale_y_continuous(breaks=seq(0, 25, 5))
ggplot(alz, aes(month, words) +
ggplot(alz, aes(month, words)) +
geom_line(aes(color=subject, group=subject)) +
theme(legend.position = "none") +
ggtitle("Spaghetti plot with the fitted line") +
coord_cartesian(ylim=c(0,25)) +
scale_y_continuous(breaks=seq(0, 25, 5))
ggplot(alz, aes(month, words)) +
geom_line(aes(color=subject, group=subject)) +
geom_line(data = alz_fitted, aes(month, words))
ggplot(alz, aes(month, words)) +
geom_line(aes(color=subject, group=subject)) +
geom_line(data = alz_fitted, aes(month, words), size=05)
ggplot(alz, aes(month, words)) +
geom_line(aes(color=subject, group=subject)) +
geom_line(data = alz_fitted, aes(month, words), size=0.5)
ggplot(alz, aes(month, words)) +
geom_line(aes(color=subject, group=subject)) +
geom_line(data = alz_fitted, aes(month, words), size=1)
ggplot(alz, aes(month, words)) +
geom_line(aes(color=subject, group=subject)) +
geom_line(data = alz_fitted, aes(month, words), size=1) +
theme(legend.position = "none") +
ggtitle("Spaghetti plot with the fitted line") +
coord_cartesian(ylim=c(0,25)) +
scale_y_continuous(breaks=seq(0, 25, 5))
# make a plot
ggplot(alz, aes(month, words)) +
geom_line(aes(color=subject, group=subject)) +
geom_line(data = alz_fitted, aes(month, words), size=1) +
theme(legend.position = "none") +
labs(
title = "Spaghetti plot with the fitted line",
subtitle = "Black line is the fitted line"
) +
coord_cartesian(ylim=c(0,25)) +
scale_y_continuous(breaks=seq(0, 25, 5))
# make a plot
ggplot(alz, aes(month, words)) +
geom_line(aes(color=subject, group=subject)) +
geom_line(data = alz_fitted, aes(month, words), size=1) +
theme(legend.position = "none") +
labs(
title = "Spaghetti plot with the fitted line",
caption = "Black line is the fitted line"
) +
coord_cartesian(ylim=c(0,25)) +
scale_y_continuous(breaks=seq(0, 25, 5))
# results
fit
?dpois
matrix(0, 1,3)
knitr::opts_chunk$set(echo = TRUE)
q <- function(x){
value <- exp(-abs(x)^3/3)
return(value)
}
q(1)
q(1)
knitr::opts_chunk$set(echo = TRUE)
## Create helper functions
# h(x) = x^2 function
h_x <- function(x){
value <- x^2
return(value)
}
# q(x) function
q_x <- function(x){
value <- exp(-abs(x)^3/3)
return(value)
}
# The number of samples to keep
M <- 10^5
# In case of alpha is low
maxit <- M * 10^4
# Specify vector storing samples
smpl <- rep(0,M)
# Start rejection algorithm
i <- index <- 1
while (i <= M & index < maxit){
# Sample from N(0,1)
candidate <- rnorm(1,0,1)
# Sample from U(0,1)
Ui <- runif(1,0,1)
# Calculate ratio
r <- 0.3 * q_x(candidate) / dnorm(candidate)
# Check Ui vs r
if (Ui < r){
smpl[i] <- candidate
i <- i + 1
}
# Keep track of total number of sampling
index <- index + 1
}
# Calculate the approximation of E(x^2)
mean(smpl^2)
# Calculate acceptance rate
print(M / index)
# Specify vector storing samples
smpl <- rep(0,M)
# Start rejection algorithm
i <- index <- 1
while (i <= M & index < maxit){
# Sample from N(0,1)
candidate <- rnorm(1,0,1)
# Sample from U(0,1)
Ui <- runif(1,0,1)
# Calculate ratio
r <- 0.1 * q_x(candidate) / dnorm(candidate)
# Check Ui vs r
if (Ui < r){
smpl[i] <- candidate
i <- i + 1
}
# Keep track of total number of sampling
index <- index + 1
}
# Calculate the approximation of E(x^2)
mean(smpl^2)
# Calculate acceptance rate
print(M / index)

## 'foobar0' function
set.seed(1)
x <- rnorm(100)
z <- rnorm(100)
foobar0 <- function(x, z) {
# Sample code
if (sum(x >= .001) < 1) {
stop("step 1 requires 1 observation(s) with value >= .001")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- sin(r) + .01
if (sum(x >= .002) < 2) {
stop("step 2 requires 2 observation(s) with value >= .002")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 2 * sin(r) + .02
if (sum(x >= .003) < 3) {
stop("step 3 requires 3 observation(s) with value >= .003")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 3 * sin(r) + .03
if (sum(x >= .004) < 4) {
stop("step 4 requires 4 observation(s) with value >= .004")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 4 * sin(r) + .04
x
# Storing the result in the 'x_foobar0' object in the global environment
assign("x_foobar0", x, envir = parent.env(environment()))
}
# Excuting 'foobar0' function
foobar0(x, z)
foobar0 <- function(x, z) {
# Sample code
if (sum(x >= .001) < 1) {
stop("step 1 requires 1 observation(s) with value >= .001")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- sin(r) + .01
if (sum(x >= .002) < 2) {
stop("step 2 requires 2 observation(s) with value >= .002")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 2 * sin(r) + .02
if (sum(x >= .003) < 3) {
stop("step 3 requires 3 observation(s) with value >= .003")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 3 * sin(r) + .03
if (sum(x >= .004) < 4) {
stop("step 4 requires 4 observation(s) with value >= .004")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 4 * sin(r) + .04
return(x)
# Storing the result in the 'x_foobar0' object in the global environment
assign("x_foobar0", x, envir = parent.env(environment()))
}
# Excuting 'foobar0' function
foobar0(x, z)
## 'foobar0' function
set.seed(1)
x <- rnorm(100)
z <- rnorm(100)
foobar0 <- function(x, z) {
# Sample code
if (sum(x >= .001) < 1) {
stop("step 1 requires 1 observation(s) with value >= .001")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- sin(r) + .01
if (sum(x >= .002) < 2) {
stop("step 2 requires 2 observation(s) with value >= .002")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 2 * sin(r) + .02
if (sum(x >= .003) < 3) {
stop("step 3 requires 3 observation(s) with value >= .003")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 3 * sin(r) + .03
if (sum(x >= .004) < 4) {
stop("step 4 requires 4 observation(s) with value >= .004")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 4 * sin(r) + .04
return(x)
# Storing the result in the 'x_foobar0' object in the global environment
assign("x_foobar0", x, envir = parent.env(environment()))
}
# Excuting 'foobar0' function
foobar0(x, z)
## 'foobar0' function
set.seed(1)
x <- rnorm(100)
z <- rnorm(100)
foobar0 <- function(x, z) {
# Sample code
if (sum(x >= .001) < 1) {
stop("step 1 requires 1 observation(s) with value >= .001")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- sin(r) + .01
if (sum(x >= .002) < 2) {
stop("step 2 requires 2 observation(s) with value >= .002")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 2 * sin(r) + .02
if (sum(x >= .003) < 3) {
stop("step 3 requires 3 observation(s) with value >= .003")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 3 * sin(r) + .03
if (sum(x >= .004) < 4) {
stop("step 4 requires 4 observation(s) with value >= .004")
}
fit <- lm(x ~ z)
r <- fit$residuals
x <- 4 * sin(r) + .04
# Storing the result in the 'x_foobar0' object in the global environment
assign("x_foobar0", x, envir = parent.env(environment()))
return(x)
}
# Excuting 'foobar0' function
foobar0(x, z)
foobar <- function(x, z) {
# Checking input
cond <- function(i){
if (sum(x >= 0.001*i) < i){
stop(paste("step", i, "requires", i, "observation(s) with value >=", 0.001*i))
}
}
# Calculating function
cal <- function(x, z){
fit <- lm(x ~z)
r <- fit$residuals
assign("x", i*sin(r) + 0.01*i, envir = parent.env(environment()))
}
# Doing Iteration
for (i in 1:4){
cond(i)
cal(x, z)
}
# Storing the result in 'x_foobar' object in the global environment
assign("x_foobar", x, envir = parent.env(environment()))
return(x)
}
# Executing foobar function
foobar(x,z)
# Comparing the two results from the functions
all.equal(x_foobar0, x_foobar)
n <- 30
p <- 50
p2 <- 25
m <- 1000
set.seed(1)
x <- matrix(rnorm(n*p),nrow=n,ncol=p)
b <- matrix(rnorm(m*p),nrow=m,ncol=p)
a <- matrix(rnorm(m*p2),nrow=m,ncol=p2)
# Original f0 function
f0 <- function(x, b, a) {
out <- numeric(0)
for (i in seq_len(m)) {
bb <- b[i, ]
aa <- a[i, ]
out <- c(out, sum(x %*% bb) + sum(aa))
}
out
}
# Making f function
f <- function(x, b, a){
colSums(x %*% t(b)) + rowSums(a)
}
# Comparing the results
all.equal(f0(x, b, a), f(x, b, a))
library(microbenchmark)
microbenchmark(f0(x, b, a), f(x, b, a))
m <- 400
n <- 50
little.n <- n/2
set.seed(1)
x <- matrix(rnorm(m*n),nrow=m,ncol=n)
f <- gl(2,little.n)
# Original getT0 function
getT0 <- function(x, f) {
ts <- sapply(seq_len(m), function(i) t.test(x[i,] ~ f, var.equal=TRUE)$statistic)
unname(ts)
}
# Making getT function
getT <- function(x){
# Spliting the data
x1 <- x[, 1:little.n]
x2 <- x[, (little.n + 1):ncol(x)]
# Calculating mean difference and pooled sample variance
mean_diff <- rowMeans(x1) - rowMeans(x2)
pooled_var <- (rowSums((x1 - rowMeans(x1))^2) + rowSums((x2 - rowMeans(x2))^2))/(n - 2)
# Calculating t-statistic
mean_diff/sqrt(pooled_var*(1/little.n + 1/little.n))
}
# Comparing the results
all.equal(getT0(x,f), getT(x))
microbenchmark(getT0(x,f), getT(x))

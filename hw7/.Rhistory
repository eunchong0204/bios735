s2gamma = s2gamma,
muhat = muhat_yi,
sigma2hat = sigma2hat_yi
)
)
}
prod(val)
#return(val)
#if (is.nan(prod(val)) == T){
#       return(4.629948e-265)
#} else{return(prod(val))}
}
fit <- optimx(
par = c(1.804, 0.165, 0.000225),
fn = function(x){integr(theta=x)}
method = "Nelder-Mead"
fit <- optimx(
par = c(1.804, 0.165, 0.000225),
fn = function(x){integr(theta=x)},
method = "Nelder-Mead",
contol = list(maximize=T)
)
fit <- optimx(
par = c(1.804, 0.165, 0.000225),
fn = function(x){integr(theta=x)},
# method = "Nelder-Mead",
contol = list(maximize=T)
)
fit <- optimx(
par = c(1.804, 0.165, 0.000225),
fn = function(x){integr(theta=x)},
# method = "Nelder-Mead",
contol = list(maximize=TRUE)
)
fit <- optimx(
par = c(1.804, 0.165, 0.000225),
fn = function(x){integr(theta=x)}
# method = "Nelder-Mead",
#contol = list(maximize=TRUE)
)
View(fit)
fit <- optimx(
par = c(1.804, 0.165, 0.000225),
fn = function(x){integr(theta=x)}
# method = "Nelder-Mead",
control = list(
fit <- optimx(
par = c(1.804, 0.165, 0.000225),
fn = function(x){integr(theta=x)},
# method = "Nelder-Mead",
control = list(
trace = 0, # higher number print more detailed output
maximize = T
# parscale = vector of scaling values to correct for scale differencs in parameters.  Should be the same length as the num of parmaters
)
)
View(fit)
fit <- optimx(
par = c(1.804, 0.165, 0.000225),
fn = function(x){integr(theta=x)},
method = "Nelder-Mead",
control = list(
trace = 0, # higher number print more detailed output
maximize = T
# parscale = vector of scaling values to correct for scale differencs in parameters.  Should be the same length as the num of parmaters
)
)
beta
s2gamma
fit <- optimx(
par = c(beta, s2gamma),
fn = function(x){integr(theta=x)},
method = "Nelder-Mead",
control = list(
trace = 0, # higher number print more detailed output
maximize = T
# parscale = vector of scaling values to correct for scale differencs in parameters.  Should be the same length as the num of parmaters
)
)
View(fit)
integr(theta=c(1.804, 0.165, 0.1))
integr(theta=c(1.804, 0.5, 0.1))
integr(theta=c(1.804, 0.05, 0.1))
fit <- optimx(
par = c(beta, s2gamma),
fn = function(x){integr(theta=x)},
method = "Nelder-Mead",
control = list(
#trace = 0, # higher number print more detailed output
maximize = T
# parscale = vector of scaling values to correct for scale differencs in parameters.  Should be the same length as the num of parmaters
)
)
integr <- function(theta) {
##추가
beta <- theta[1:2]
s2gamma <- theta[3]
# Finds nodes and weights
gh <- gauss.quad(n = 5, kind = "hermite")
nodes_over_gamma1 <- gh$nodes
# Create NA vector
val <- rep(NA, max(alz$subject))
# Looping
for (i in 1:max(alz$subject)) {
yi <- alz$words[alz$subject == i]
muhat_yi <- muhat(yi, beta, s2gamma)
sigma2hat_yi <- sigma2hat(muhat_yi, yi, beta, s2gamma, inner)
#나중에 gamma1 > gamma로 바꾸면 될듯
t <- muhat_yi + sqrt(2 * as.numeric(sigma2hat_yi)) * nodes_over_gamma1
w <- gh$weights / sqrt(pi)
# Approximate the integral
val[i] <- sum(
w * h_t(
t = t,
yi = yi,
xi = xi,
beta = beta,
s2gamma = s2gamma,
muhat = muhat_yi,
sigma2hat = sigma2hat_yi
)
)
}
sum(log(val))
#return(val)
#if (is.nan(prod(val)) == T){
#       return(4.629948e-265)
#} else{return(prod(val))}
}
integr(theta=c(1.804, 0.05, 0.1))
integr(theta=c(1.804, 0.165, 0.180625))
integr(theta=c(1.804, 0.165, 0.30625))
integr(theta=c(1.804, 0.165, 0.9))
integr(theta=c(1.4, 0.165, 0.9))
fit <- optimx(
par = c(1.2, 0.2, 0.0001),
fn = function(x){integr(theta=x)},
method = "Nelder-Mead",
control = list(
#trace = 0, # higher number print more detailed output
maximize = T
# parscale = vector of scaling values to correct for scale differencs in parameters.  Should be the same length as the num of parmaters
)
)
View(fit)
beta
s2gamma
#1.820155 0.1657221 0.2182965
integr(theta=c(1.820155, 0.1657221, 0.2182965))
integr(theta=c(1.804, 0.165, 0.180625))
fit <- optimx(
par = c(1.804, 0.165, 0.000225),
fn = function(x){integr(theta=x)},
method = "Nelder-Mead",
control = list(
#trace = 0, # higher number print more detailed output
maximize = T
# parscale = vector of scaling values to correct for scale differencs in parameters.  Should be the same length as the num of parmaters
)
)
View(fit)
beta
s2gamma
integr <- function(theta, M) {
##추가
beta <- theta[1:2]
s2gamma <- theta[3]
# Finds nodes and weights
gh <- gauss.quad(n = M, kind = "hermite")
nodes_over_gamma1 <- gh$nodes
# Create NA vector
val <- rep(NA, max(alz$subject))
# Looping
for (i in 1:max(alz$subject)) {
yi <- alz$words[alz$subject == i]
muhat_yi <- muhat(yi, beta, s2gamma)
sigma2hat_yi <- sigma2hat(muhat_yi, yi, beta, s2gamma, inner)
#나중에 gamma1 > gamma로 바꾸면 될듯
t <- muhat_yi + sqrt(2 * as.numeric(sigma2hat_yi)) * nodes_over_gamma1
w <- gh$weights / sqrt(pi)
# Approximate the integral
val[i] <- sum(
w * h_t(
t = t,
yi = yi,
xi = xi,
beta = beta,
s2gamma = s2gamma,
muhat = muhat_yi,
sigma2hat = sigma2hat_yi
)
)
}
sum(log(val))
#return(val)
#if (is.nan(prod(val)) == T){
#       return(4.629948e-265)
#} else{return(prod(val))}
}
fit <- optimx(
par = c(beta, s2gamma),
fn = function(x, M){integr(theta=x, M)},
M = 5
method = "Nelder-Mead",
fit <- optimx(
par = c(beta, s2gamma),
fn = function(x, M){integr(theta=x, M)},
M = 5,
method = "Nelder-Mead",
control = list(
#trace = 0, # higher number print more detailed output
maximize = T
# parscale = vector of scaling values to correct for scale differencs in parameters.  Should be the same length as the num of parmaters
)
)
View(fit)
fit <- optimx(
par = c(beta, s2gamma),
fn = function(x, M){integr(theta=x, M)},
M = 1,
method = "Nelder-Mead",
control = list(
#trace = 0, # higher number print more detailed output
maximize = T
# parscale = vector of scaling values to correct for scale differencs in parameters.  Should be the same length as the num of parmaters
)
)
View(fit)
knitr::opts_chunk$set(echo = TRUE)
setwd("D:/Spring_2022_D/BIOS735/hw/hw7")
alz = read.table("alzheimers.dat", header = T)
xi <- cbind(rep(1,5), 1:5)
y1 <- alz$words[alz$subject == 1]
#
inner(c(1,0.003), y1, beta, s2gamma)
## Integration related helper functions
# 1. Create integrand function for ith subject
# This needs to calculate muhat and sigma2hat for aGQ
inner <- function(gammai, yi, beta, s2gamma, log = F){
val <- rep(NA, length(gammai))
for (i in 1:length(val)){
lambda <- exp(xi %*% beta + gammai[i])
val0 <- dpois(x = yi, lambda = lambda)
val[i] <- prod(val0) * dnorm(x = gammai[i],
mean = 0,
sd = sqrt(s2gamma))
}
if (log == F){
return(val)
} else{
return(log(val))
}
}
#
inner(c(1,0.003), y1, beta, s2gamma)
beta = c(1.804, 0.165)
s2gamma = 0.000225
#
inner(c(1,0.003), y1, beta, s2gamma)
#
inner(0.2, y1, beta, s2gamma)
# Confirm
muhat(y1, beta, s2gamma)
# 1-2. Create a function calculating the posterior mode of the integrand (=muhat)
muhat <- function(yi, beta, s2gamma) {
pm <- suppressWarnings(
optimx(
par = 0,
fn = function(x, yi, xi, beta, s2gamma) {
inner(
gammai = x,
xi = xi,
yi = yi,
beta = beta,
s2gamma = s2gamma
)
},
yi = yi,
xi = xi,
beta = beta,
s2gamma = s2gamma,
method = "Nelder-Mead",
control = list(maximize = T)
)
)
return(pm$p1)
}
# Confirm
muhat(y1, beta, s2gamma)
# Confirm
muhat(y1, beta, s2gamma)
# 1-2. Create a function calculating the posterior mode of the integrand (=muhat)
muhat <- function(yi, beta, s2gamma) {
pm <- suppressWarnings(
optimx(
par = 0,
fn = function(x, yi, xi, beta, s2gamma) {
inner(
gammai = x,
xi = xi,
yi = yi,
beta = beta,
s2gamma = s2gamma
)
},
yi = yi,
beta = beta,
s2gamma = s2gamma,
method = "Nelder-Mead",
control = list(maximize = T)
)
)
return(pm$p1)
}
# Confirm
muhat(y1, beta, s2gamma)
# 1-2. Create a function calculating the posterior mode of the integrand (=muhat)
muhat <- function(yi, beta, s2gamma) {
pm <- suppressWarnings(
optimx(
par = 0,
fn = function(x, yi, beta, s2gamma) {
inner(
gammai = x,
yi = yi,
beta = beta,
s2gamma = s2gamma
)
},
yi = yi,
beta = beta,
s2gamma = s2gamma,
method = "Nelder-Mead",
control = list(maximize = T)
)
)
return(pm$p1)
}
# Confirm
muhat(y1, beta, s2gamma)
# 1-3. Create a function calculating a sigma2hat
sigma2hat <- function(muhat, yi, beta, s2gamma, inner) {
hess_pm <- hessian(
func = inner,
x = muhat,
yi = yi,
beta = beta,
s2gamma = s2gamma,
log = T
)
return(-1 / hess_pm)
}
# 사용법 결과=matrix
sigma2hat(muhat(y1, beta, s2gamma), y1, beta, s2gamma, inner)
sqrt(sigma2hat(muhat(y1, beta, s2gamma), y1, beta, s2gamma, inner))
# 1-4 Create h(x) function
# Integrad factors into h(x)*pi(gammai|muhat,sigma2hat)
h_t <- function(t, yi, beta, s2gamma, muhat, sigma2hat){
val <- rep(NA, length(t))
for (i in 1:length(val)){
lambda <- exp(xi %*% beta + t[i])
val0 <- dpois(x = yi, lambda = lambda)
val[i] <- prod(val0) *
dnorm(x = t[i], mean = 0, sd = sqrt(s2gamma)) /
dnorm(x = t[i], mean = muhat, sd = sqrt(sigma2hat))
}
return(val)
}
# 쓰는 법
h_t(t, y1, beta, s2gamma, muhat(y1, beta, s2gamma), sigma2hat(muhat(y1, beta, s2gamma), y1, beta, s2gamma, inner))
M <- 5
gh <- gauss.quad(n = M, kind = "hermite")
nodes_over_gamma1 <- gh$nodes
t <- muhat(y1, beta, s2gamma) + sqrt(2*as.numeric(sigma2hat(muhat(y1, beta, s2gamma), y1, beta, s2gamma, inner))) * nodes_over_gamma1
# 쓰는 법
h_t(t, y1, beta, s2gamma, muhat(y1, beta, s2gamma), sigma2hat(muhat(y1, beta, s2gamma), y1, beta, s2gamma, inner))
val <- sum(w * h_t(
t = t,
yi = y1,
beta = beta,
s2gamma = s2gamma,
pm = pm$p1,
hess_pm = hess_pm
))
w <- gh$weights /sqrt(pi)
val <- sum(w * h_t(
t = t,
yi = y1,
beta = beta,
s2gamma = s2gamma,
pm = pm$p1,
hess_pm = hess_pm
))
val <- sum(w * h_t(t, y1, beta, s2gamma, muhat(y1, beta, s2gamma), sigma2hat(muhat(y1, beta, s2gamma), y1, beta, s2gamma, inner))
))
val <- sum(w * h_t(t, y1, beta, s2gamma, muhat(y1, beta, s2gamma), sigma2hat(muhat(y1, beta, s2gamma), y1, beta, s2gamma, inner))
val <- sum(w * h_t(t, y1, beta, s2gamma, muhat(y1, beta, s2gamma), sigma2hat(muhat(y1, beta, s2gamma), y1, beta, s2gamma, inner)))
val
## 2. Integrate
integr <- function(theta, M) {
# Split theta into beta and s2gama
beta <- theta[1:2]
s2gamma <- theta[3]
# Finds nodes and weights
gh <- gauss.quad(n = M, kind = "hermite")
nodes_over_gamma <- gh$nodes
# Create NA vector
val <- rep(NA, max(alz$subject))
# Looping
for (i in 1:max(alz$subject)) {
yi <- alz$words[alz$subject == i]
muhat_yi <- muhat(yi, beta, s2gamma)
sigma2hat_yi <- sigma2hat(muhat_yi, yi, beta, s2gamma, inner)
#나중에 gamma1 > gamma로 바꾸면 될듯
t <- muhat_yi + sqrt(2 * as.numeric(sigma2hat_yi)) * nodes_over_gamma
w <- gh$weights / sqrt(pi)
# Approximate the integral
val[i] <- sum(
w * h_t(
t = t,
yi = yi,
beta = beta,
s2gamma = s2gamma,
muhat = muhat_yi,
sigma2hat = sigma2hat_yi
)
)
}
# Calculate Log-likelihood
return(sum(log(val)))
}
# Confirm
integr(c(beta, s2sigma), M=5)
# Confirm
integr(c(beta, s2gamma), M=5)
## 2. Integrate
# This function calculates Log-likelihood given beta and s2gamma
integr <- function(theta, M) {
# Split theta into beta and s2gama
beta <- theta[1:2]
s2gamma <- theta[3]
# Finds nodes and weights
gh <- gauss.quad(n = M, kind = "hermite")
nodes_over_gamma <- gh$nodes
# Create NA vector
val <- rep(NA, max(alz$subject))
# Looping
for (i in 1:max(alz$subject)) {
# Subset data by subject
yi <- alz$words[alz$subject == i]
# Calculate muhat and sigma2hat by subject
muhat_yi <- muhat(yi, beta, s2gamma)
sigma2hat_yi <- sigma2hat(muhat_yi, yi, beta, s2gamma, inner)
# Calculate new nodes and weights
t <- muhat_yi + sqrt(2 * as.numeric(sigma2hat_yi)) * nodes_over_gamma
w <- gh$weights / sqrt(pi)
# Approximate the integral by subject
val[i] <- sum(
w * h_t(
t = t,
yi = yi,
beta = beta,
s2gamma = s2gamma,
muhat = muhat_yi,
sigma2hat = sigma2hat_yi
)
)
}
# Calculate Log-likelihood
return(sum(log(val)))
}
## 3. Optimize using Nelder-Mead
fit <- optimx(
par = c(beta, s2gamma),
fn = function(x, M){integr(theta=x, M)},
M = 1,
method = "Nelder-Mead",
control = list(maximize = T)
)
View(fit)
# 100 samples
n = 100
# create X from two normally distributed predictors, assume intercept
x1 = rnorm(n)
x2 = rnorm(n)
X = model.matrix( ~ 1 + x1 + x2)
# pick beta
beta = c(1, 1, 1)
# simulate samples
lambda = exp(X %*% beta)
y = rpois(n, lambda)
logLik.reg = function(beta, y, X) {
lambda_hat = exp(X %*% beta)
value = sum(dpois(y, lambda = lambda_hat, log = T))
return(value)
}
logLik.reg(c(-1,-100,10), y, x)
fit = optimx(
par = c(log(mean(y)),0,0), # initial values for the parameters.
fn = function(x, X, y){logLik.reg(beta = x,X = X, y= y)}, # log likelihood
method = "Nelder-Mead",
y = y,
X = X,
#itmax = maxit, # max number of iterations
control = list(
trace = 0, # higher number print more detailed output
maximize = T
# parscale = vector of scaling values to correct for scale differencs in parameters.  Should be the same length as the num of parmaters
)
)
fit
fit
